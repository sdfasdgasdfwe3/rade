import os
import json
import requests
import sys
import subprocess
import asyncio
import signal
from telethon import TelegramClient, events
import psutil
from animation_script import animations
import animation_script

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_FILE = "config.json"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py"
ANIMATION_SCRIPT_GITHUB_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/animation_script.py"
SCRIPT_VERSION = "0.2.39"

# Emoji
EMOJIS = {
    "auth": "üîë",
    "phone": "üì±",
    "update": "üîÑ",
    "version": "üè∑Ô∏è",
    "success": "‚úÖ",
    "error": "‚ùå",
    "info": "‚ÑπÔ∏è",
    "exit": "üëã",
    "menu": "üìã",
    "bot": "ü§ñ"
}

def is_bot_running():
    current_pid = os.getpid()
    for process in psutil.process_iter(attrs=['pid', 'name', 'cmdline']):
        try:
            cmdline = ' '.join(process.info['cmdline'])
            if 'python' in process.info['name'].lower() and 'bot.py' in cmdline:
                if process.info['pid'] != current_pid:
                    return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, KeyError, TypeError):
            continue
    return False

def load_config():
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
            if "selected_animation" not in config:
                config["selected_animation"] = 1
            return config
        except Exception as e:
            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞:", e)
            return {}
    return {}

def save_config(config):
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2)
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:", e)

config = load_config()
API_ID = config.get("API_ID")
API_HASH = config.get("API_HASH")
PHONE_NUMBER = config.get("PHONE_NUMBER")
selected_animation = config.get("selected_animation", 1)

if not all([API_ID, API_HASH, PHONE_NUMBER]):
    try:
        print(f"{EMOJIS['auth']} –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram:")
        API_ID = int(input(f"{EMOJIS['auth']} –í–≤–µ–¥–∏—Ç–µ API ID: "))
        API_HASH = input(f"{EMOJIS['auth']} –í–≤–µ–¥–∏—Ç–µ API HASH: ").strip()
        PHONE_NUMBER = input(f"{EMOJIS['phone']} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +79991234567): ").strip()
        config = {
            "API_ID": API_ID,
            "API_HASH": API_HASH,
            "PHONE_NUMBER": PHONE_NUMBER,
            "selected_animation": selected_animation
        }
        save_config(config)
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞:", e)
        sys.exit(1)

if is_bot_running():
    print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –í—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ–ª—å–∑—è.")
    sys.exit(1)

client = TelegramClient(f"session_{PHONE_NUMBER.replace('+', '')}", API_ID, API_HASH)

def discard_local_changes():
    try:
        subprocess.run(["git", "checkout", "--", os.path.basename(__file__)], check=True)
    except Exception:
        pass

def check_for_updates():
    try:
        response = requests.get(GITHUB_RAW_URL)
        if response.status_code == 200:
            remote_script = response.text
            remote_version = None
            for line in remote_script.splitlines():
                if "SCRIPT_VERSION" in line:
                    try:
                        remote_version = line.split('=')[1].strip().strip('"')
                    except Exception:
                        pass
                    break
            if remote_version and SCRIPT_VERSION != remote_version:
                print(f"{EMOJIS['update']} –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {remote_version} (—Ç–µ–∫—É—â–∞—è {SCRIPT_VERSION}). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                discard_local_changes()
                with open(os.path.abspath(__file__), 'w', encoding='utf-8') as f:
                    f.write(remote_script)
                print(f"{EMOJIS['success']} –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
                exit()
        else:
            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", e)

def check_for_animation_script_updates():
    try:
        response = requests.get(ANIMATION_SCRIPT_GITHUB_URL)
        if response.status_code == 200:
            remote_file = response.text
            remote_version = None
            for line in remote_file.splitlines():
                if "ANIMATION_SCRIPT_VERSION" in line:
                    try:
                        remote_version = line.split('=')[1].strip().strip('"')
                    except Exception:
                        pass
                    break
            if remote_version and remote_version != animation_script.ANIMATION_SCRIPT_VERSION:
                print(f"{EMOJIS['update']} –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ {remote_version} (—Ç–µ–∫—É—â–∞—è {animation_script.ANIMATION_SCRIPT_VERSION}). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                with open("animation_script.py", "w", encoding="utf-8") as f:
                    f.write(remote_file)
                print(f"{EMOJIS['success']} –§–∞–π–ª animation_script.py –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
                exit()
            else:
                print(f"{EMOJIS['success']} –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç—É–∞–ª–µ–Ω.")
        else:
            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞:", e)

animation_selection_mode = False
current_user_id = None

@client.on(events.NewMessage(pattern='/p'))
async def animate_handler(event):
    command_text = event.raw_text
    parts = command_text.split(maxsplit=1)
    if len(parts) < 2:
        await event.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /p —Ç–µ–∫—Å—Ç")
        return
    text_to_animate = parts[1]
    if selected_animation in animations:
        anim_func = animations[selected_animation][1]
        try:
            await anim_func(event, text_to_animate)
        except Exception as e:
            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏:", e)
    else:
        await event.reply("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∞–Ω–∏–º–∞—Ü–∏—è.")

@client.on(events.NewMessage(pattern='/m'))
async def animation_menu(event):
    global animation_selection_mode, current_user_id
    if not event.out:
        return
    current_user_id = event.sender_id
    animation_selection_mode = True
    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é:\n"
    for num, (name, _) in sorted(animations.items()):
        menu_text += f"{num}) {name}\n"
    menu_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏."
    await event.reply(menu_text)

@client.on(events.NewMessage)
async def animation_selection_handler(event):
    global animation_selection_mode, selected_animation, config
    if animation_selection_mode and event.out:
        text = event.raw_text.strip()
        if text.isdigit():
            number = int(text)
            if number in animations:
                selected_animation = number
                config["selected_animation"] = selected_animation
                save_config(config)
                await event.reply(f"{EMOJIS['success']} –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é: {animations[selected_animation][0]}")
                messages = await client.get_messages(event.chat_id, limit=10)
                deleted_count = 0
                for msg in messages:
                    if msg.out:
                        try:
                            await msg.delete()
                            deleted_count += 1
                        except Exception as e:
                            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", e)
                        if deleted_count >= 4:
                            break
            else:
                await event.reply(f"{EMOJIS['error']} –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏.")
            animation_selection_mode = False

async def close_client():
    if client.is_connected():
        await client.disconnect()
    print(f"\n{EMOJIS['exit']} –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def signal_handler(sig, frame):
    print(f"\n{EMOJIS['exit']} –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    client.loop.run_until_complete(close_client())
    sys.exit(0)

def main():
    check_for_updates()
    check_for_animation_script_updates()
    try:
        client.start(PHONE_NUMBER)
        print(f"{EMOJIS['bot']} –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω. –í–µ—Ä—Å–∏—è: {SCRIPT_VERSION}")
        me = client.loop.run_until_complete(client.get_me())
        username = me.username if me.username else (me.first_name if me.first_name else "Unknown")
        print(f"{EMOJIS['bot']} –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {username}")
        print("–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª: t.me/kwotko")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        signal.signal(signal.SIGINT, signal_handler)
        client.run_until_disconnected()
    except Exception as e:
        print(f"{EMOJIS['error']} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", e)
    finally:
        client.loop.run_until_complete(close_client())

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    main()
