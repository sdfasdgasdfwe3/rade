import os
import sys
import configparser
from pyrogram import Client, filters
from pyrogram.errors import SessionPasswordNeeded, BadRequest

def debug_config():
    """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\n=== –î–ï–ë–ê–ì –ö–û–ù–§–ò–ì–ê ===")
    print(f"–°—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists('config.ini')}")
    if os.path.exists('config.ini'):
        with open('config.ini', 'r') as f:
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{f.read()}")
    print("====================\n")

def validate_config(config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥–∞"""
    if not config.has_section('pyrogram'):
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [pyrogram]")
    required = ['api_id', 'api_hash', 'phone_number']
    for key in required:
        if not config.get('pyrogram', key, fallback=None):
            raise ValueError(f"–ù–µ —É–∫–∞–∑–∞–Ω {key}")

def setup_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config = configparser.ConfigParser()
    config_path = os.path.abspath('config.ini')
    
    if os.path.exists(config_path):
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config.read_file(f)
            validate_config(config)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return config
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {e}")
            debug_config()
            os.remove(config_path)
            return setup_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    print("\n=== –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ö–û–ù–§–ò–ì–ê ===")
    config['pyrogram'] = {}
    
    # –í–≤–æ–¥ API_ID
    while True:
        api_id = input("–í–≤–µ–¥–∏—Ç–µ API_ID: ").strip()
        if api_id.isdigit():
            config['pyrogram']['api_id'] = api_id
            break
        print("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    
    # –í–≤–æ–¥ API_HASH
    config['pyrogram']['api_hash'] = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ").strip()
    
    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    while True:
        phone = input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7...): ").strip()
        if phone:
            config['pyrogram']['phone_number'] = phone
            break
        print("–ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
    with open(config_path, 'w', encoding='utf-8') as f:
        config.write(f)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        validate_config(config)
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return config
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        debug_config()
        os.remove(config_path)
        return setup_config()

def check_session():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏"""
    return os.path.exists("session.session")

def auth_client(app):
    """–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        print("\nüîê –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        app.connect()
        
        sent_code = app.send_code(app.phone_number)
        code = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
        
        try:
            app.sign_in(app.phone_number, sent_code.phone_code_hash, code)
        except SessionPasswordNeeded:
            password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ").strip()
            app.check_password(password)
        
        print("\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    finally:
        app.disconnect()

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not os.access(os.getcwd(), os.W_OK):
        print("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å!")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    config = setup_config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    app = Client(
        "session",
        api_id=int(config.get('pyrogram', 'api_id')),
        api_hash=config.get('pyrogram', 'api_hash'),
        phone_number=config.get('pyrogram', 'phone_number'),
        app_version="RadeBot 2.0",
        system_version="Termux 1.0",
        workers=1
    )
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if not check_session():
        if not auth_client(app):
            print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        with app:
            print("\n‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
            me = app.get_me()
            print(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
            
            @app.on_message(filters.command("start"))
            def start(client, message):
                message.reply("‚ö° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            print("\nüöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            app.run()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    while True:
        try:
            main()
            break
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            break
        except Exception as e:
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
            if input("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å? (y/n): ").lower() != 'y':
                break
