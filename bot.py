import os
import re
import sys
import asyncio
import aiohttp
import subprocess
import shutil
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from configparser import ConfigParser

VERSION = "1.8"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py"
CONFIG_FILE = 'config.ini'
SESSION_FILE = 'session_name'

async def self_update():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GITHUB_RAW_URL) as response:
                if response.status == 200:
                    new_content = await response.text()
                    version_match = re.search(r'VERSION\s*=\s*"([\d.]+)"', new_content)
                    if not version_match:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
                        return
                    new_version = version_match.group(1)
                    
                    current_parts = list(map(int, VERSION.split('.')))
                    new_parts = list(map(int, new_version.split('.')))
                    
                    if new_parts > current_parts:
                        print(f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {new_version}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                        temp_file = 'bot_temp.py'
                        script_path = os.path.abspath(__file__)
                        
                        with open(temp_file, 'w', encoding='utf-8') as f:
                            f.write(new_content)
                            
                        shutil.move(temp_file, script_path)
                        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                        os.execv(sys.executable, [sys.executable] + sys.argv)
                    else:
                        print(f"‚úÖ –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {VERSION}.")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")

def create_or_read_config():
    config = ConfigParser()
    if not os.path.exists(CONFIG_FILE):
        print("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥...")
        config['Telegram'] = {
            'api_id': '–≤–∞—à_api_id',
            'api_hash': '–≤–∞—à_api_hash',
            'phone_number': '+79991234567'
        }
        with open(CONFIG_FILE, 'w') as f:
            config.write(f)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω: {CONFIG_FILE}")
        print("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!")
        sys.exit()
    else:
        config.read(CONFIG_FILE)
        if not config.has_section('Telegram'):
            print("‚ùå –í –∫–æ–Ω—Ñ–∏–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [Telegram]!")
            sys.exit(1)
        return config['Telegram']

async def authenticate(client, phone):
    try:
        await client.send_code_request(phone)
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram: ")
        return await client.sign_in(phone=phone, code=code)
    except PhoneCodeInvalidError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        return await authenticate(client, phone)
    except SessionPasswordNeededError:
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
        return await client.sign_in(password=password)

async def main():
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {VERSION}")
    await self_update()
    
    config = create_or_read_config()
    client = TelegramClient(SESSION_FILE, 
                          int(config['api_id']), 
                          config['api_hash'])
    
    try:
        await client.start(phone=lambda: config['phone_number'])
        if not await client.is_user_authorized():
            print("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            await authenticate(client, config['phone_number'])
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        print("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("/a - –í—ã–±–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏")
        print("/update - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        print("/exit - –í—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞\n")

        while True:
            cmd = await asyncio.get_event_loop().run_in_executor(None, input, "> ")
            if cmd.strip() == '/update':
                await self_update()
            elif cmd.strip() == '/a':
                script_name = "animation_script.py"
                if not os.path.exists(script_name):
                    print(f"‚õî –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                else:
                    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {script_name}...")
                    await client.disconnect()
                    subprocess.Popen([sys.executable, script_name])
                    sys.exit(0)
            elif cmd.strip() == '/exit':
                await client.disconnect()
                sys.exit(0)
                
    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞: {str(e)}")
        await client.disconnect()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
