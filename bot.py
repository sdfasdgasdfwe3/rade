import asyncio  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asyncio –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–æ–¥–æ–º
import subprocess
import os  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è os
import requests
import json
from telethon import TelegramClient, events
from random import choice

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_FILE = 'config.json'
GITHUB_RAW_URL = 'https://raw.githubusercontent.com/sdfasdgasdfwe3rademainbot.py'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
SCRIPT_VERSION = 0.1.0
DEFAULT_TYPING_SPEED = 0.3
DEFAULT_CURSOR = '‚ñå'  # –°–∏–º–≤–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
HEART = 'ü§ç'
COLORED_HEARTS = ['üíó', 'üíì', 'üíñ', 'üíò', '‚ù§Ô∏è', 'üíû']
PARADE_MAP = '''
00000000000
00111011100
01111111110
01111111110
00111111100
00011111000
00001110000
00000100000
'''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ git
def discard_local_changes():
    try:
        print('–û—Ç–º–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ bot.py...')
        subprocess.run(['git', 'checkout', '--', 'bot.py'], check=True)
        print('–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ bot.py –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.')
    except subprocess.CalledProcessError as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π {e}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ GitHub
def check_for_updates():
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        discard_local_changes()

        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç
        response = requests.get(GITHUB_RAW_URL)
        if response.status_code == 200:
            remote_script = response.text
            current_file = os.path.abspath(__file__)

            with open(current_file, 'r', encoding='utf-8') as f:
                current_script = f.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫–∏ SCRIPT_VERSION –≤ –æ–±–æ–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
            if SCRIPT_VERSION in remote_script and SCRIPT_VERSION in current_script:
                remote_version_line = [
                    line for line in remote_script.splitlines() if SCRIPT_VERSION in line
                ]
                if remote_version_line:
                    remote_version = remote_version_line[0].split('=')[1].strip().strip('"')
                    if SCRIPT_VERSION != remote_version:
                        print(f'–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {remote_version} (—Ç–µ–∫—É—â–∞—è {SCRIPT_VERSION})')
                        with open(current_file, 'w', encoding='utf-8') as f:
                            f.write(remote_script)
                        print('–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.')
                        exit()
                    else:
                        print('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞.')
                else:
                    print('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ.')
            else:
                print('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.')
        else:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ {response.status_code}')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π {e}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
def setup_autostart():
    boot_directory = os.path.expanduser('~/.termux/boot')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    if not os.path.exists(boot_directory):
        os.makedirs(boot_directory)
        print(f'–ü–∞–ø–∫–∞ {boot_directory} —Å–æ–∑–¥–∞–Ω–∞.')

    # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    script_path = os.path.join(boot_directory, 'start_bot.sh')

    # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Å–∫—Ä–∏–ø—Ç—É –±–æ—Ç–∞
    bot_script_path = 'data/data/com.termux/files/home/radebot.py'  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å

    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    with open(script_path, 'w') as f:
        f.write(f'#!/data/data/com.termux/files/usr/bin/bash\n')
        f.write(f'cd /data/data/com.termux/files/home/radebot\n')
        f.write(f'python3 {bot_script_path}\n')

    # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—É
    os.chmod(script_path, 0o755)

    print(f'–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {script_path}.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
def remove_autostart():
    boot_directory = os.path.expanduser('~/.termux/boot')
    script_path = os.path.join(boot_directory, 'start_bot.sh')

    if os.path.exists(script_path):
        os.remove(script_path)
        print(f'–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω. –°–∫—Ä–∏–ø—Ç {script_path} –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.')
    else:
        print('–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.')

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
def print_autostart_instructions():
    print('–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –≤ Termux:')
    print('–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞:')
    print('  python3 –ø—É—Ç—å_–∫_—Å–∫—Ä–∏–ø—Ç—É bot.py --remove-autostart')
    print('–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª:')
    print('  rm ~/.termux/boot/start_bot.sh')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if os.path.exists(CONFIG_FILE):
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        API_ID = config.get('API_ID')
        API_HASH = config.get('API_HASH')
        PHONE_NUMBER = config.get('PHONE_NUMBER')
        typing_speed = config.get('typing_speed', DEFAULT_TYPING_SPEED)
        cursor_symbol = config.get('cursor_symbol', DEFAULT_CURSOR)
    except (json.JSONDecodeError, KeyError) as e:
        print(f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {e}. –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.')
        API_ID = None
        API_HASH = None
        PHONE_NUMBER = None
else:
    API_ID = None
    API_HASH = None
    PHONE_NUMBER = None

if not API_ID or not API_HASH or not PHONE_NUMBER:
    try:
        print('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram')
        API_ID = int(input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID: '))
        API_HASH = input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API Hash: ').strip()
        PHONE_NUMBER = input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +375XXXXXXXXX, +7XXXXXXXXXX): ').strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump({
                'API_ID': API_ID,
                'API_HASH': API_HASH,
                'PHONE_NUMBER': PHONE_NUMBER,
                'typing_speed': DEFAULT_TYPING_SPEED,
                'cursor_symbol': DEFAULT_CURSOR
            }, f)
        print('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.')
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {e}')
        exit(1)

# –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
SESSION_FILE = f'session_{PHONE_NUMBER.replace("+", "").replace("-", "")}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_FILE, API_ID, API_HASH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã–º–∏ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
def generate_parade_colored():
    output = ''
    for c in PARADE_MAP:
        if c == '0':
            output += HEART
        elif c == '1':
            output += choice(COLORED_HEARTS)
        else:
            output += c
    return output

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
@client.on(events.NewMessage(pattern=r'p (.+)'))
async def animated_typing(event):
    global typing_speed, cursor_symbol
    try:
        if not event.out:
            return

        text = event.pattern_match.group(1)
        typed_text = ""

        for char in text:
            typed_text += char
            await event.edit(typed_text + cursor_symbol)
            await asyncio.sleep(typing_speed)

        await event.edit(typed_text)
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–µ—Ä–¥–µ—á–µ–∫
@client.on(events.NewMessage(outgoing=True))
async def handle_heart(event):
    if HEART in event.message.message and event.sender_id == client.get_me().id:
        if event.is_channel or event.is_group:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            await process_build_place(event)
            await process_colored_parade(event)
            await process_love_words(event)
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –∫–æ–≥–¥–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–æ—á–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
            async for user in client.iter_participants(event.peer_id):
                if user.id == event.sender_id:
                    continue
                if user.status and user.status != "offline":
                    await asyncio.sleep(3)
                    await client.edit_message(event.peer_id, event.message.id, generate_parade_colored())
                    await process_love_words(event)
                    await process_colored_parade(event)
                    break

# –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
async def process_love_words(event):
    await client.edit_message(event.peer_id, event.message.id, 'i')
    await asyncio.sleep(1)
    await client.edit_message(event.peer_id, event.message.id, 'i love')
    await asyncio.sleep(1)
    await client.edit_message(event.peer_id, event.message.id, 'i love you')
    await asyncio.sleep(1)
    await client.edit_message(event.peer_id, event.message.id, 'i love you forever')
    await asyncio.sleep(1)
    await client.edit_message(event.peer_id, event.message.id, 'i love you foreverüíó')

async def process_build_place(event):
    output = ''
    for i in range(8):
        output += '\n'
        for j in range(11):
            output += HEART
            await client.edit_message(event.peer_id, event.message.id, output)
            await asyncio.sleep(0.01)

async def process_colored_parade(event):
    for i in range(50):
        text = generate_parade_colored()
        await client.edit_message(event.peer_id, event.message.id, text)
        await asyncio.sleep(0.01)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
async def main():
    print(f'–ó–∞–ø—É—Å–∫ main() - –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {SCRIPT_VERSION}')
    setup_autostart()
    check_for_updates()
    await client.start(phone=PHONE_NUMBER)
    print('–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram.')
    print('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É p –≤–∞—à —Ç–µ–∫—Å—Ç.')
    print_autostart_instructions()
    await client.run_until_disconnected()

if __name__ == '__main__':
    check_for_updates()
    asyncio.run(main())
