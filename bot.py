import os
import re
import sys
import asyncio
import aiohttp
import subprocess
import shutil  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç shutil
from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError
from configparser import ConfigParser

VERSION = "1.5"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py"
CONFIG_FILE = 'config.ini'
SESSION_FILE = 'session_name'

def parse_version(version_str):
    return tuple(map(int, version_str.split('.')))

async def check_update():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GITHUB_RAW_URL) as response:
                remote_code = await response.text()
                remote_version = re.search(r"VERSION\s*=\s*['\"](.*?)['\"]", remote_code).group(1)
                
                if parse_version(remote_version) > parse_version(VERSION):
                    return True, remote_code
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {str(e)}")
    return False, None

async def self_update():
    print("‚ôªÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    try:
        update_available, new_code = await check_update()
        if not update_available:
            print("‚úÖ –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞")
            return

        # –°–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        protected_files = {
            os.path.abspath(CONFIG_FILE),
            os.path.abspath(f"{SESSION_FILE}.session"),
            os.path.abspath(__file__)
        }

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∫—Ä–æ–º–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
        current_dir = os.getcwd()
        for root, dirs, files in os.walk(current_dir, topdown=False):
            for name in files + dirs:
                full_path = os.path.abspath(os.path.join(root, name))
                
                if any(full_path.startswith(p) for p in protected_files):
                    continue
                
                try:
                    if os.path.isfile(full_path):
                        os.remove(full_path)
                        print(f"üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {full_path}")
                    else:
                        shutil.rmtree(full_path)
                        print(f"üóë –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {full_path}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {full_path}: {str(e)}")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
        with open(__file__, 'w', encoding='utf-8') as f:
            f.write(new_code)

        print("üîÑ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
        os.execl(sys.executable, sys.executable, *sys.argv)
    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

async def update_checker():
    while True:
        await asyncio.sleep(3600)
        await self_update()

def create_or_read_config():
    config = ConfigParser()
    
    if not os.path.exists(CONFIG_FILE):
        print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
        
        config['Telegram'] = {
            'api_id': input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID: "),
            'api_hash': input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API HASH: "),
            'phone_number': input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã): ")
        }
        
        with open(CONFIG_FILE, 'w') as f:
            config.write(f)
        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {CONFIG_FILE}")
    
    config.read(CONFIG_FILE)
    return config['Telegram']

async def main():
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {VERSION}")
    await self_update()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    
    config = create_or_read_config()
    
    client = TelegramClient(
        SESSION_FILE,
        int(config['api_id']),
        config['api_hash']
    )
    
    await client.start(phone=config['phone_number'])
    
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

    print("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("/a - –í—ã–±–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏")
    print("/update - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    print("/exit - –í—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞\n")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ while –∏ –µ–≥–æ —Ç–µ–ª–∞
    while True:
        cmd = await asyncio.get_event_loop().run_in_executor(None, input, "> ")
        if cmd.strip() == '/update':
            await self_update()
        elif cmd.strip() == '/a':  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            script_name = "animation_script.py"
            if not os.path.exists(script_name):
                print(f"‚õî –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            else:
                print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {script_name}...")
                await client.disconnect()
                subprocess.Popen([sys.executable, script_name])
                sys.exit(0)
        elif cmd.strip() == '/exit':
            sys.exit(0)

# ... (–∏–º–ø–æ—Ä—Ç—ã –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except SessionPasswordNeededError:
        print("\nüîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∑–∞–Ω–æ–≤–æ
        config = ConfigParser()
        config.read(CONFIG_FILE)
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        with TelegramClient(SESSION_FILE, 
                          int(config['Telegram']['api_id']), 
                          config['Telegram']['api_hash']) as client:
            client.start(password=password)
        print("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
