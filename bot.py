import os
import sys
import signal
import atexit
import configparser
from pyrogram import Client, filters
from pyrogram.errors import SessionPasswordNeeded, BadRequest

def debug_config():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞"""
    print("\n=== –î–ï–ë–ê–ì –ö–û–ù–§–ò–ì–ê ===")
    print(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists('config.ini')}")
    if os.path.exists('config.ini'):
        with open('config.ini', 'r') as f:
            content = f.read()
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{content}")
    print("====================\n")

def validate_config(config):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥–∞"""
    if not config.has_section('pyrogram'):
        raise ValueError("–°–µ–∫—Ü–∏—è [pyrogram] –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    required = ['api_id', 'api_hash', 'phone_number']
    for key in required:
        if not config.get('pyrogram', key, fallback=None):
            raise ValueError(f"–ù–µ —É–∫–∞–∑–∞–Ω {key}")

def setup_config():
    config_path = os.path.abspath('config.ini')
    config = configparser.ConfigParser()
    
    # –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    if os.path.exists(config_path):
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config.read_file(f)
            validate_config(config)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –≤–∞–ª–∏–¥–µ–Ω")
            return config
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {e}")
            debug_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    print("\n=== –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ö–û–ù–§–ò–ì–ê ===")
    config['pyrogram'] = {}
    
    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    while True:
        api_id = input("–í–≤–µ–¥–∏—Ç–µ API_ID: ").strip()
        if api_id.isdigit():
            break
        print("API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    config['pyrogram']['api_id'] = api_id
    
    config['pyrogram']['api_hash'] = input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ").strip()
    
    while True:
        phone = input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7...): ").strip()
        if phone:
            break
        print("–ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
    config['pyrogram']['phone_number'] = phone
    
    # –ó–∞–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
    with open(config_path, 'w', encoding='utf-8') as f:
        config.write(f)
    
    # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    new_config = configparser.ConfigParser()
    new_config.read(config_path)
    try:
        validate_config(new_config)
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return new_config
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        debug_config()
        raise

def cleanup_session():
    """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞"""
    session_file = "session.session"
    if os.path.exists(session_file):
        try:
            os.remove(session_file)
            print("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è.")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")

def graceful_shutdown(app):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    try:
        app.stop()
        print("‚úÖ –°–µ—Å—Å–∏—è Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    sys.exit(0)

def main():
    if not os.access(os.getcwd(), os.W_OK):
        print("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é!")
        sys.exit(1)
        
    config = setup_config()
    
    try:
        app = Client(
            "session",
            api_id=int(config.get('pyrogram', 'api_id')),
            api_hash=config.get('pyrogram', 'api_hash'),
            phone_number=config.get('pyrogram', 'phone_number'),
            app_version="RadeBot 2.0",
            system_version="Termux 1.0"
        )
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        os.remove('config.ini')
        return main()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        graceful_shutdown(app)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    atexit.register(graceful_shutdown, app)  # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã Python

    @app.on_message(filters.command("start"))
    def start(client, message):
        message.reply("‚ö° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")

    try:
        with app:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            app.run()  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    except SessionPasswordNeeded:
        print("\nüîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        app.password = input("–ü–∞—Ä–æ–ª—å: ").strip()
        try:
            with app:
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º —É—Å–ø–µ—à–Ω–∞!")
                app.run()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            sys.exit(1)
    except BadRequest as e:
        if "database is locked" in str(e):
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –û—á–∏—â–∞—é —Å–µ—Å—Å–∏—é...")
            cleanup_session()
            print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ BadRequest: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()  # –£–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª while True
