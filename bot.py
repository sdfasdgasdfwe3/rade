import os
import re
import sys
import asyncio
import aiohttp
import subprocess
import shutil
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from configparser import ConfigParser

VERSION = "2.5"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py"
GITHUB_ANIMATION_URL = "https://raw.githubusercontent.com/yourusername/yourrepo/main/animation_script.py"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL
CONFIG_FILE = 'config.ini'
SESSION_FILE = 'session_name'
CHOICE_FILE = 'animation_choice.txt'
ANIMATION_FILE = "animation_script.py"

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
AVAILABLE_ANIMATIONS = {
    "1": {"name": "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞", "typing_speed": 0.3, "cursor_symbol": "|"},
    "2": {"name": "–ë—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞", "typing_speed": 0.1, "cursor_symbol": "_"},
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
}

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –≤—ã–±–∏—Ä–∞–ª –∞–Ω–∏–º–∞—Ü–∏—é, —á–∏—Ç–∞–µ–º –µ—ë –∏–∑ —Ñ–∞–π–ª–∞, –∏–Ω–∞—á–µ ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç "1"
if os.path.exists(CHOICE_FILE):
    with open(CHOICE_FILE, 'r', encoding='utf-8') as f:
        chosen = f.read().strip()
else:
    chosen = "1"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

animation_settings = AVAILABLE_ANIMATIONS.get(chosen, AVAILABLE_ANIMATIONS["1"])


def get_input(prompt, validation_regex=None, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!"):
    while True:
        value = input(prompt).strip()
        if not value:
            print("‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
            continue
        if validation_regex and not re.match(validation_regex, value):
            print(f"‚ö†Ô∏è {error_message}")
            continue
        return value


def create_or_read_config():
    config = ConfigParser()
    
    if not os.path.exists(CONFIG_FILE):
        print("\nüîß –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:")
        
        api_id = get_input(
            "–í–≤–µ–¥–∏—Ç–µ API ID: ",
            r'^\d+$',
            "API ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!"
        )
        
        api_hash = get_input(
            "–í–≤–µ–¥–∏—Ç–µ API HASH: ",
            r'^[a-f0-9]{32}$',
            "API HASH –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞ (a-f, 0-9)!"
        )
        
        phone_number = get_input(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ",
            r'^\+\d{10,15}$',
            "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!"
        )
        
        config['Telegram'] = {
            'api_id': api_id,
            'api_hash': api_hash,
            'phone_number': phone_number
        }
        
        with open(CONFIG_FILE, 'w') as f:
            config.write(f)
            
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.ini")
    
    config.read(CONFIG_FILE)
    if not config.has_section('Telegram'):
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [Telegram]!")
        sys.exit(1)
        
    return config['Telegram']


async def self_update():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GITHUB_RAW_URL) as response:
                if response.status == 200:
                    new_content = await response.text()
                    version_match = re.search(r'VERSION\s*=\s*"([\d.]+)"', new_content)
                    
                    if not version_match:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
                        return
                        
                    new_version = version_match.group(1)
                    current_parts = list(map(int, VERSION.split('.')))
                    new_parts = list(map(int, new_version.split('.')))
                    
                    if new_parts > current_parts:
                        print(f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {new_version}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                        temp_file = 'bot_temp.py'
                        script_path = os.path.abspath(__file__)
                        
                        with open(temp_file, 'w', encoding='utf-8') as f:
                            f.write(new_content)
                            
                        shutil.move(temp_file, script_path)
                        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                        os.execv(sys.executable, [sys.executable] + sys.argv)
                    else:
                        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {VERSION}.")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ö–æ–¥: {response.status}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")


async def update_animation_script():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è animation_script.py...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GITHUB_ANIMATION_URL) as response:
                if response.status == 200:
                    new_content = await response.text()
                    # –ï—Å–ª–∏ –≤ —Ñ–∞–π–ª–µ animation_script.py –µ—Å—Ç—å –≤–µ—Ä—Å–∏—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ—Ä—Å–∏–∏.
                    temp_file = 'animation_temp.py'
                    with open(temp_file, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    
                    shutil.move(temp_file, ANIMATION_FILE)
                    print("‚úÖ –§–∞–π–ª animation_script.py —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è animation_script.py. –ö–æ–¥: {response.status}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è animation_script.py: {str(e)}")


async def authenticate(client, phone):
    try:
        await client.send_code_request(phone)
        code = get_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram: ", r'^\d+$', "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
        return await client.sign_in(phone=phone, code=code)
    except PhoneCodeInvalidError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        return await authenticate(client, phone)
    except SessionPasswordNeededError:
        password = get_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
        return await client.sign_in(password=password)


async def async_input(prompt: str = "> ") -> str:
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, input, prompt)


async def console_input_task(client):
    while True:
        cmd = (await async_input()).strip().lower()
        if cmd == '/update':
            await self_update()
        elif cmd == '/update_animation':
            await update_animation_script()
        elif cmd == '/a':
            if not os.path.exists(ANIMATION_FILE):
                print(f"‚õî –°–∫—Ä–∏–ø—Ç {ANIMATION_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            else:
                print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {ANIMATION_FILE} –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏...")
                await client.disconnect()
                subprocess.Popen([sys.executable, ANIMATION_FILE])
                sys.exit(0)
        elif cmd == '/exit':
            await client.disconnect()
            print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
            sys.exit(0)
        else:
            print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /a, /update, /update_animation, /exit")


async def main():
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {VERSION}")
    await self_update()
    
    config = create_or_read_config()
    
    client = TelegramClient(
        SESSION_FILE,
        int(config['api_id']),
        config['api_hash']
    )
    
    try:
        await client.start(phone=lambda: config['phone_number'])
        
        if not await client.is_user_authorized():
            print("\nüîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            await authenticate(client, config['phone_number'])
        
        print("\n‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        print("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("/a - –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏")
        print("/update - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        print("/update_animation - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è animation_script.py")
        print("/exit - –≤—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞")
        print("/p –¢–µ–∫—Å—Ç - –∞–Ω–∏–º–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º.\n")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /p
        @client.on(events.NewMessage(pattern=r'/p (.+)'))
        async def handle_animation(event):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –±–æ—Ç–∞)
            if not event.out:
                return
            try:
                text = event.pattern_match.group(1)
                typed_text = ""
                for char in text:
                    typed_text += char
                    await event.edit(typed_text + animation_settings["cursor_symbol"])
                    await asyncio.sleep(animation_settings["typing_speed"])
                await event.edit(typed_text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
                await event.reply("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.</b>", parse_mode='html')
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
        @client.on(events.NewMessage(incoming=True, func=lambda e: e.is_private))
        async def handle_private_message(event):
            try:
                msg_text = event.raw_text.strip().lower()
                
                if msg_text == '/exit':
                    await event.respond('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É...')
                    await client.disconnect()
                    print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /exit –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                    sys.exit(0)
                
                elif msg_text == '/k':
                    message = await event.respond('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥...')
                    commands = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/a - –∑–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏\n/update - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞\n/update_animation - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π animation_script.py\n/exit - –≤—ã—Ö–æ–¥"
                    await message.edit(commands)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        @client.on(events.NewMessage(outgoing=True))
        async def handle_own_messages(event):
            msg_text = event.raw_text.strip().lower()
            
            if msg_text == '/exit':
                await event.respond('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É...')
                await client.disconnect()
                print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /exit –∏–∑ —Å–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                sys.exit(0)
            
            elif msg_text == '/update':
                await self_update()
                await event.respond('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            
            elif msg_text == '/update_animation':
                await update_animation_script()
                await event.respond('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è animation_script.py –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
            
            elif msg_text == '/a':
                if os.path.exists(ANIMATION_FILE):
                    await event.respond('üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç –≤—ã–±–æ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏...')
                    await client.disconnect()
                    subprocess.Popen([sys.executable, ANIMATION_FILE])
                    sys.exit(0)
                else:
                    await event.respond(f'‚ùå –°–∫—Ä–∏–ø—Ç {ANIMATION_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!')

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        asyncio.create_task(console_input_task(client))
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        await client.run_until_disconnected()
                
    except Exception as e:
        print(f"\n‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await client.disconnect()
        sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
