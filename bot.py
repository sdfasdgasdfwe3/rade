import os
import asyncio
import sys
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError

def load_config():
    try:
        with open("config.txt", "r") as f:
            config = {}
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    config[key.strip()] = value.strip()
            
            API_ID = config.get("API_ID")
            API_HASH = config.get("API_HASH")
            PHONE_NUMBER = config.get("PHONE_NUMBER")
            
            if not all([API_ID, API_HASH, PHONE_NUMBER]):
                raise ValueError("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.txt!")
            
            return int(API_ID), API_HASH, PHONE_NUMBER
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

API_ID, API_HASH, PHONE_NUMBER = load_config()
client = TelegramClient(f'session_{PHONE_NUMBER}', API_ID, API_HASH)

async def authorize():
    try:
        await client.start(
            phone=PHONE_NUMBER,
            code_callback=lambda: input("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
        )
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
    except SessionPasswordNeededError:
        print("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
        password = input("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        await client.sign_in(password=password)
        print("üéâ 2FA –ø—Ä–æ–π–¥–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

async def handle_message(event):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É /m
    if event.sender_id == event.client.my_id and event.message.text == '/m':
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π (–ø—Ä–∏–º–µ—Ä)
        animations = ["–ê–Ω–∏–º–∞—Ü–∏—è 1", "–ê–Ω–∏–º–∞—Ü–∏—è 2", "–ê–Ω–∏–º–∞—Ü–∏—è 3"]
        await event.reply("üìÉ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:\n" + "\n".join(animations))

async def main():
    try:
        await authorize()
        me = await client.get_me()
        client.my_id = me.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        print("\nü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–∫—Ä–æ–π—Ç–µ Termux –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        client.add_event_handler(handle_message)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        await client.run_until_disconnected()

    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    try:
        client.loop.run_until_complete(main())
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
