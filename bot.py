import os
import asyncio
import sys
import json
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from animation_script import animations

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "config.txt"
EMOJIS = {
    "success": "‚úÖ",
    "error": "‚ùå",
    "menu": "üìã",
    "info": "‚ÑπÔ∏è",
    "bot": "ü§ñ",
    "animation": "üé≠"
}

def load_config():
    try:
        with open(CONFIG_FILE, "r") as f:
            config = {}
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    config[key.strip()] = value.strip()
            
            API_ID = config.get("API_ID")
            API_HASH = config.get("API_HASH")
            PHONE_NUMBER = config.get("PHONE_NUMBER")
            SELECTED_ANIM = config.get("SELECTED_ANIM", "1")
            
            if not all([API_ID, API_HASH, PHONE_NUMBER]):
                raise ValueError("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")
            
            return int(API_ID), API_HASH, PHONE_NUMBER, int(SELECTED_ANIM)
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        sys.exit(1)

def save_config(api_id, api_hash, phone, selected_anim):
    with open(CONFIG_FILE, "w") as f:
        f.write(
            f"API_ID={api_id}\n"
            f"API_HASH={api_hash}\n"
            f"PHONE_NUMBER={phone}\n"
            f"SELECTED_ANIM={selected_anim}"
        )

API_ID, API_HASH, PHONE_NUMBER, SELECTED_ANIM = load_config()
client = TelegramClient(f'session_{PHONE_NUMBER}', API_ID, API_HASH)
animation_selection_mode = False

# ========== –ö–û–ú–ê–ù–î–´ ==========
@client.on(events.NewMessage(pattern='/m'))
async def animation_menu(event):
    global animation_selection_mode
    try:
        menu_msg = await event.reply(f"{EMOJIS['menu']} –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∏–º–∞—Ü–∏–∏...")
        menu_text = "\n".join([f"{num}) {name}" for num, (name, _) in animations.items()])
        selection_msg = await event.reply(menu_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        client.message_ids_to_delete = [menu_msg.id, selection_msg.id]
        animation_selection_mode = True
        
    except Exception as e:
        await event.reply(f"{EMOJIS['error']} –û—à–∏–±–∫–∞: {str(e)}")

@client.on(events.NewMessage(pattern='/p'))
async def animate_handler(event):
    try:
        text = event.raw_text.split(maxsplit=1)[1]
        anim_name, anim_func = animations[SELECTED_ANIM]
        msg = await event.reply(f"{EMOJIS['animation']} –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∏–º–∞—Ü–∏—é...")
        await anim_func(msg, text)
    except IndexError:
        await event.reply(f"{EMOJIS['error']} –§–æ—Ä–º–∞—Ç: /p <—Ç–µ–∫—Å—Ç>")
    except KeyError:
        await event.reply(f"{EMOJIS['error']} –ê–Ω–∏–º–∞—Ü–∏—è {SELECTED_ANIM} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@client.on(events.NewMessage)
async def handle_message(event):
    global SELECTED_ANIM, animation_selection_mode
    if animation_selection_mode and event.raw_text.isdigit():
        try:
            # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é
            if hasattr(client, 'message_ids_to_delete'):
                await client.delete_messages(
                    await event.get_input_chat(),
                    client.message_ids_to_delete
                )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
            num = int(event.raw_text)
            if num in animations:
                SELECTED_ANIM = num
                save_config(API_ID, API_HASH, PHONE_NUMBER, SELECTED_ANIM)
                confirm_msg = await event.reply(
                    f"{EMOJIS['success']} –í—ã–±—Ä–∞–Ω–æ: {animations[num][0]}"
                )
                await asyncio.sleep(2)
                await confirm_msg.delete()
                
        except Exception as e:
            await event.reply(f"{EMOJIS['error']} –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            animation_selection_mode = False

# ========== –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def authorize():
    try:
        await client.start(
            phone=PHONE_NUMBER,
            code_callback=lambda: input(f"{EMOJIS['info']} –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
        )
        print(f"{EMOJIS['success']} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    except SessionPasswordNeededError:
        password = input(f"{EMOJIS['info']} –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
        await client.sign_in(password=password)
        print(f"{EMOJIS['success']} 2FA –ø—Ä–æ–π–¥–µ–Ω–∞!")
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

async def main():
    try:
        await authorize()
        print(
            f"\n{EMOJIS['bot']} –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!\n"
            f"{EMOJIS['info']} –ö–æ–º–∞–Ω–¥—ã:\n"
            f"/m - –í—ã–±–æ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏\n"
            f"/p <—Ç–µ–∫—Å—Ç> - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é\n"
            f"{EMOJIS['info']} –ó–∞–∫—Ä–æ–π—Ç–µ Termux –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."
        )
        while True:
            await asyncio.sleep(3600)
    except KeyboardInterrupt:
        print(f"\n{EMOJIS['info']} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    try:
        client.loop.run_until_complete(main())
    except Exception as e:
        print(f"{EMOJIS['error']} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)
