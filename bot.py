import os
import json
import requests
import sys
import asyncio
from telethon import TelegramClient, events
import sqlite3

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_FILE = "config.json"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py"
SCRIPT_VERSION = "0.2.41"

# Emoji
EMOJIS = {
    "auth": "üîë",
    "phone": "üì±",
    "update": "üîÑ",
    "version": "üè∑Ô∏è",
    "success": "‚úÖ",
    "error": "‚ùå",
    "info": "‚ÑπÔ∏è",
    "exit": "üëã",
    "menu": "üìã",
    "bot": "ü§ñ"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_user_id = None

# region –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
            return config
        except Exception as e:
            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
            return {}
    return {}

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=2)
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

config = load_config()
API_ID = config.get("API_ID")
API_HASH = config.get("API_HASH")
PHONE_NUMBER = config.get("PHONE_NUMBER")

if not all([API_ID, API_HASH, PHONE_NUMBER]):
    try:
        print(f"{EMOJIS['auth']} –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:")
        API_ID = int(input(f"{EMOJIS['auth']} API ID: "))
        API_HASH = input(f"{EMOJIS['auth']} API HASH: ").strip()
        PHONE_NUMBER = input(f"{EMOJIS['phone']} –ù–æ–º–µ—Ä (+79991234567): ").strip()
        config.update({
            "API_ID": API_ID,
            "API_HASH": API_HASH,
            "PHONE_NUMBER": PHONE_NUMBER
        })
        save_config(config)
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

client = TelegramClient(
    f"session_{PHONE_NUMBER.replace('+', '')}",
    API_ID,
    API_HASH,
    connection_retries=0
)

async def safe_shutdown():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    if client.is_connected():
        await client.disconnect()
    print(f"\n{EMOJIS['success']} –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def close_client():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telegram"""
    await safe_shutdown()

async def authenticate():
    """–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        await client.start(PHONE_NUMBER)
        if not await client.is_user_authorized():
            password = input(f"{EMOJIS['auth']} –ü–∞—Ä–æ–ª—å 2FA: ").strip()
            await client.sign_in(password=password)
        print(f"{EMOJIS['success']} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        sys.exit(1)

async def update_bot():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ —Å GitHub"""
    try:
        response = requests.get(GITHUB_RAW_URL)
        if response.status_code == 200:
            with open("bot.py", "w", encoding="utf-8") as f:
                f.write(response.text)
            print(f"{EMOJIS['update']} –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            os.execv(sys.executable, [sys.executable, "bot.py"])
        else:
            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {response.status_code}")
    except Exception as e:
        print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

@client.on(events.NewMessage(pattern='/p'))
async def animate_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /p"""
    command_text = event.raw_text
    parts = command_text.split(maxsplit=1)
    if len(parts) < 2:
        await event.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /p —Ç–µ–∫—Å—Ç")
        return
    text_to_animate = parts[1]
    if selected_animation in animations:
        anim_func = animations[selected_animation][1]
        try:
            await anim_func(event, text_to_animate)
        except Exception as e:
            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
    else:
        await event.reply("–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∞–Ω–∏–º–∞—Ü–∏—è.")

@client.on(events.NewMessage(pattern='/m'))
async def animation_menu(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /m"""
    global animation_selection_mode, current_user_id
    if not event.out:
        return
    current_user_id = event.sender_id
    animation_selection_mode = True
    menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é:\n"
    for num, (name, _) in sorted(animations.items()):
        menu_text += f"{num}) {name}\n"
    menu_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏."
    await event.reply(menu_text)

@client.on(events.NewMessage)
async def animation_selection_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏"""
    global animation_selection_mode, selected_animation, config
    if animation_selection_mode and event.out:
        text = event.raw_text.strip()
        if text.isdigit():
            number = int(text)
            if number in animations:
                selected_animation = number
                config["selected_animation"] = selected_animation
                save_config(config)
                await event.reply(f"{EMOJIS['success']} –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é: {animations[selected_animation][0]}")
                messages = await client.get_messages(event.chat_id, limit=10)
                deleted_count = 0
                for msg in messages:
                    if msg.out:
                        try:
                            await msg.delete()
                            deleted_count += 1
                        except Exception as e:
                            print(f"{EMOJIS['error']} –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                        if deleted_count >= 4:
                            break
            else:
                await event.reply(f"{EMOJIS['error']} –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏.")
            animation_selection_mode = False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        client.loop.run_until_complete(authenticate())
        print(f"{EMOJIS['bot']} –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (v{SCRIPT_VERSION})")
        client.run_until_disconnected()
    except Exception as e:
        print(f"{EMOJIS['error']} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        client.loop.run_until_complete(safe_shutdown())

if __name__ == "__main__":
    main()
# endregion
