import os
import re
import sys
import asyncio
import aiohttp
import subprocess
import shutil
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from configparser import ConfigParser

VERSION = "1.9"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py"
CONFIG_FILE = 'config.ini'
SESSION_FILE = 'session_name'

def get_input(prompt, validation_regex=None, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!"):
    while True:
        value = input(prompt).strip()
        if not value:
            print("‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
            continue
        if validation_regex and not re.match(validation_regex, value):
            print(f"‚ö†Ô∏è {error_message}")
            continue
        return value

def create_or_read_config():
    config = ConfigParser()
    
    if not os.path.exists(CONFIG_FILE):
        print("\nüîß –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:")
        
        api_id = get_input(
            "–í–≤–µ–¥–∏—Ç–µ API ID (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org): ",
            r'^\d+$',
            "API ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!"
        )
        
        api_hash = get_input(
            "–í–≤–µ–¥–∏—Ç–µ API HASH (32 —Å–∏–º–≤–æ–ª–∞ –∏–∑ my.telegram.org): ",
            r'^[a-f0-9]{32}$',
            "API HASH –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞ (a-f, 0-9)!"
        )
        
        phone_number = get_input(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ñ–æ—Ä–º–∞—Ç +79991234567): ",
            r'^\+\d{10,15}$',
            "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!"
        )
        
        config['Telegram'] = {
            'api_id': api_id,
            'api_hash': api_hash,
            'phone_number': phone_number
        }
        
        with open(CONFIG_FILE, 'w') as f:
            config.write(f)
            
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ config.ini")
    
    config.read(CONFIG_FILE)
    if not config.has_section('Telegram'):
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [Telegram]!")
        sys.exit(1)
        
    return config['Telegram']

async def self_update():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GITHUB_RAW_URL) as response:
                if response.status == 200:
                    new_content = await response.text()
                    version_match = re.search(r'VERSION\s*=\s*"([\d.]+)"', new_content)
                    
                    if not version_match:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
                        return
                        
                    new_version = version_match.group(1)
                    current_parts = list(map(int, VERSION.split('.')))
                    new_parts = list(map(int, new_version.split('.')))
                    
                    if new_parts > current_parts:
                        print(f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è {new_version}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                        temp_file = 'bot_temp.py'
                        script_path = os.path.abspath(__file__)
                        
                        with open(temp_file, 'w', encoding='utf-8') as f:
                            f.write(new_content)
                            
                        shutil.move(temp_file, script_path)
                        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
                        os.execv(sys.executable, [sys.executable] + sys.argv)
                    else:
                        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {VERSION}.")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –ö–æ–¥: {response.status}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

async def authenticate(client, phone):
    try:
        await client.send_code_request(phone)
        code = get_input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram: ", r'^\d+$', "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
        return await client.sign_in(phone=phone, code=code)
    except PhoneCodeInvalidError:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        return await authenticate(client, phone)
    except SessionPasswordNeededError:
        password = get_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
        return await client.sign_in(password=password)

async def main():
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏–∏ {VERSION}")
    await self_update()
    
    config = create_or_read_config()
    
    client = TelegramClient(
        SESSION_FILE,
        int(config['api_id']),
        config['api_hash']
    )
    
    try:
        await client.start(phone=lambda: config['phone_number'])
        
        if not await client.is_user_authorized():
            print("\nüîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            await authenticate(client, config['phone_number'])
        
        print("\n‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        print("\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("/a - –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞")
        print("/update - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        print("/exit - –í—ã—Ö–æ–¥ –∏–∑ –±–æ—Ç–∞\n")

        while True:
            cmd = await asyncio.get_event_loop().run_in_executor(None, input, "> ")
            cmd = cmd.strip().lower()
            
            if cmd == '/update':
                await self_update()
            elif cmd == '/a':
                script_name = "animation_script.py"
                if not os.path.exists(script_name):
                    print(f"‚õî –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                else:
                    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {script_name}...")
                    await client.disconnect()
                    subprocess.Popen([sys.executable, script_name])
                    sys.exit(0)
            elif cmd == '/exit':
                await client.disconnect()
                print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
                sys.exit(0)
            else:
                print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /a, /update, /exit")
                
    except Exception as e:
        print(f"\n‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        await client.disconnect()
        sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
