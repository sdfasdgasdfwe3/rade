import asyncio
import subprocess
import os
import requests
import json
from telethon import TelegramClient, events

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_FILE = 'config.json'
GITHUB_RAW_URL = 'https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py'
SCRIPT_VERSION = 0.0
DEFAULT_TYPING_SPEED = 0.3
DEFAULT_CURSOR = u'\u2588'  # –°–∏–º–≤–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ git
def discard_local_changes():
    print("–û—Ç–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ bot.py.")
    try:
        subprocess.run(['git', 'checkout', '--', 'bot.py'], check=True)
        print("–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ bot.py –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
@client.on(events.NewMessage(pattern=r'p (.+)'))
async def animated_typing(event):
    print("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π.")
    global typing_speed, cursor_symbol
    try:
        if not event.out:
            return

        text = event.pattern_match.group(1)
        typed_text = ""

        for char in text:
            typed_text += char
            await event.edit(typed_text + cursor_symbol)
            await asyncio.sleep(typing_speed)

        await event.edit(typed_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–µ—Ä–¥—Ü–∞
@client.on(events.NewMessage(pattern=r'h'))
async def heart_animation(event):
    heart_symbols = ['‚ù§Ô∏è', 'üíì', 'üíñ', 'üíò', 'üíù', 'üíû', 'üíó']
    try:
        if not event.out:
            return
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –º–∏–≥–∞—é—â–µ–≥–æ —Å–µ—Ä–¥—Ü–∞
        for _ in range(10):  # 10 —Ä–∞–∑ –≤—ã–≤–æ–¥–∏–º –∞–Ω–∏–º–∞—Ü–∏—é
            for heart in heart_symbols:
                await event.edit(heart)
                await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏
        await event.delete()  # –£–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–µ—Ä–¥—Ü–∞: {e}")

async def main():
    print(f"–ó–∞–ø—É—Å–∫ main()... –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {SCRIPT_VERSION}")
    
    # –ù–∞—Å—Ç—Ä–æ–∏–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    setup_autostart()
    
    check_for_updates()
    await client.start(phone=PHONE_NUMBER)
    print("–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Telegram.")
    print("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É p –≤–∞—à —Ç–µ–∫—Å—Ç.")
    print("–î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–µ—Ä–¥—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É h.")
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    print_autostart_instructions()
    
    await client.run_until_disconnected()

if __name__ == '__main__':
    check_for_updates()
    asyncio.run(main())  # –¢–µ–ø–µ—Ä—å asyncio –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ main() –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
