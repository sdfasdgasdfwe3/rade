import os
import re
import sys
import asyncio
import aiohttp
import subprocess
import shutil
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from configparser import ConfigParser

VERSION = "1.8"
GITHUB_RAW_URL = "https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py"
CONFIG_FILE = 'config.ini'
SESSION_FILE = 'rade_session'

def create_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    config = ConfigParser()
    
    config['Telegram'] = {
        '# –ü–æ–ª—É—á–∏—Ç–µ API ID –∏ Hash –Ω–∞ my.telegram.org': None,
        'api_id': '–í–ê–®_API_ID',
        'api_hash': '–í–ê–®_API_HASH',
        '# –ù–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ': None,
        'phone_number': '+79991234567'
    }

    with open(CONFIG_FILE, 'w') as f:
        config.write(f)

    print(f"""
    =============================================
    –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {CONFIG_FILE}
    
    1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–µ—Å—å:
       https://my.telegram.org/apps
       
    2. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥:
       - api_id (—Ü–∏—Ñ—Ä—ã)
       - api_hash (32 —Å–∏–º–≤–æ–ª–∞)
       - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã
    
    3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
    =============================================
    """)
    sys.exit()

def validate_config(config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    required = {
        'api_id': ("–í–≤–µ–¥–∏—Ç–µ API ID (—Ü–∏—Ñ—Ä—ã)", r'^\d+$'),
        'api_hash': ("–í–≤–µ–¥–∏—Ç–µ API Hash (32 —Å–∏–º–≤–æ–ª–∞)", r'^[a-f0-9]{32}$'),
        'phone_number': ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", r'^\+[0-9]{9,15}$')
    }

    for key, (message, pattern) in required.items():
        value = config.get('Telegram', key)
        if '–í–ê–®_' in value or not re.match(pattern, value):
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ {key}:")
            print(f"   - {message}")
            print(f"   - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
            print("\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
            sys.exit(1)

async def self_update():
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(GITHUB_RAW_URL) as response:
                if response.status == 200:
                    new_content = await response.text()
                    version_match = re.search(r'VERSION\s*=\s*"([\d.]+)"', new_content)
                    
                    if version_match and version_match.group(1) > VERSION:
                        print(f"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {version_match.group(1)}, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                        with open('bot_temp.py', 'w') as f:
                            f.write(new_content)
                        shutil.move('bot_temp.py', __file__)
                        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
    if not os.path.exists(CONFIG_FILE):
        create_config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    config = ConfigParser()
    config.read(CONFIG_FILE)
    validate_config(config)
    tg_config = config['Telegram']

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = TelegramClient(
        SESSION_FILE,
        int(tg_config['api_id']),
        tg_config['api_hash']
    )

    # –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try:
        if not await client.is_user_authorized():
            print("\nüîê –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            await client.start(
                phone=lambda: tg_config['phone_number'],
                code_callback=lambda: input("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
                password=lambda: input("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            )
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    print(f"""
    ============================
    –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! 
    –í–µ—Ä—Å–∏—è: {VERSION}
    –ù–æ–º–µ—Ä: {tg_config['phone_number']}
    –ö–æ–º–∞–Ω–¥—ã:
    /a - –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    /update - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    /exit - –í—ã—Ö–æ–¥
    ============================
    """)

    while True:
        cmd = await asyncio.get_event_loop().run_in_executor(None, input, "> ")
        if cmd == '/a':
            # –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            pass
        elif cmd == '/update':
            await self_update()
        elif cmd == '/exit':
            await client.disconnect()
            sys.exit()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
