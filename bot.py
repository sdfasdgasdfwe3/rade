import asyncio
import subprocess
import os
import requests
import json
from telethon import TelegramClient, events
from pyrogram import Client as PyrogramClient, filters
from pyrogram.errors import FloodWait
from time import sleep
import emoji
from heart import heart_emoji  # –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ñ–∞–π–ª —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_FILE = 'config.json'
GITHUB_RAW_URL = 'https://raw.githubusercontent.com/sdfasdgasdfwe3/rade/main/bot.py'
SCRIPT_VERSION = 0.0
DEFAULT_TYPING_SPEED = 0.3
DEFAULT_CURSOR = u'\u2588'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ git
def discard_local_changes():
    print("–û—Ç–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ bot.py.")
    try:
        print("–û—Ç–º–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ bot.py...")
        subprocess.run(['git', 'checkout', '--', 'bot.py'], check=True)
        print("–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ bot.py –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ GitHub
def check_for_updates():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ GitHub.")
    try:
        discard_local_changes()
        response = requests.get(GITHUB_RAW_URL)
        if response.status_code == 200:
            remote_script = response.text
            current_file = os.path.abspath(__file__)

            with open(current_file, 'r', encoding='utf-8') as f:
                current_script = f.read()

            if str(SCRIPT_VERSION) in remote_script and str(SCRIPT_VERSION) in current_script:
                remote_version_line = [
                    line for line in remote_script.splitlines() if str(SCRIPT_VERSION) in line
                ]
                if remote_version_line:
                    remote_version = remote_version_line[0].split('=')[1].strip().strip('')
                    if str(SCRIPT_VERSION) != remote_version:
                        print(f"–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {remote_version} (—Ç–µ–∫—É—â–∞—è {SCRIPT_VERSION})")
                        with open(current_file, 'w', encoding='utf-8') as f:
                            f.write(remote_script)
                        print("–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
                        exit()
                    else:
                        print("–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞.")
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ.")
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ {response.status_code}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
def setup_autostart():
    print("–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ Termux –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
    boot_directory = os.path.expanduser("~/.termux/boot")
    if not os.path.exists(boot_directory):
        os.makedirs(boot_directory)
        print(f"–ü–∞–ø–∫–∞ {boot_directory} —Å–æ–∑–¥–∞–Ω–∞.")

    script_path = os.path.join(boot_directory, 'start_bot.sh')
    bot_script_path = '/data/data/com.termux/files/home/rade/bot.py'
    
    with open(script_path, 'w') as f:
        f.write(f"#!/data/data/com.termux/files/usr/bin/bash\n")
        f.write(f"cd /data/data/com.termux/files/home/rade\n")
        f.write(f"python3 {bot_script_path}\n")

    os.chmod(script_path, 0o755)
    print(f"–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {script_path}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
def remove_autostart():
    print("–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ Termux.")
    boot_directory = os.path.expanduser("~/.termux/boot")
    script_path = os.path.join(boot_directory, 'start_bot.sh')
    
    if os.path.exists(script_path):
        os.remove(script_path)
        print(f"–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω. –°–∫—Ä–∏–ø—Ç {script_path} –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.")
    else:
        print("–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if os.path.exists(CONFIG_FILE):
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
        API_ID = config.get("API_ID")
        API_HASH = config.get("API_HASH")
        PHONE_NUMBER = config.get("PHONE_NUMBER")
        typing_speed = config.get("typing_speed", DEFAULT_TYPING_SPEED)
        cursor_symbol = config.get("cursor_symbol", DEFAULT_CURSOR)
    except (json.JSONDecodeError, KeyError) as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {e}.")
        API_ID = None
        API_HASH = None
        PHONE_NUMBER = None
else:
    API_ID = None
    API_HASH = None
    PHONE_NUMBER = None

if not API_ID or not API_HASH or not PHONE_NUMBER:
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram.")
    API_ID = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID: "))
    API_HASH = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API Hash: ").strip()
    PHONE_NUMBER = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX): ").strip()

    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump({
            "API_ID": API_ID,
            "API_HASH": API_HASH,
            "PHONE_NUMBER": PHONE_NUMBER,
            "typing_speed": DEFAULT_TYPING_SPEED,
            "cursor_symbol": DEFAULT_CURSOR
        }, f)

SESSION_FILE = f'session_{PHONE_NUMBER.replace("+", "").replace("-", "")}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
client = TelegramClient(SESSION_FILE, API_ID, API_HASH)

app = PyrogramClient("my_account", api_id=API_ID, api_hash=API_HASH)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å heart –≤ Pyrogram
@app.on_message(filters.command("heart", prefixes="") & filters.me)
def heart_f(_, message):
    end_message = "üíõ" + "__" + message.text.split("heart", maxsplit=1)[1] + "__"
    
    for i in range(len(heart_emoji)):
        try:
            message.edit(emoji.emojize(emoji.demojize(heart_emoji[i])))
            sleep(0.325)
        except FloodWait as e:
            print(f"–û–∂–∏–¥–∞–Ω–∏–µ: {e.x} —Å–µ–∫—É–Ω–¥")
            sleep(e.x)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            break
    
    message.edit(end_message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å Telethon
@client.on(events.NewMessage(pattern=r'p (.+)'))
async def animated_typing(event):
    print("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π.")
    global typing_speed, cursor_symbol
    try:
        if not event.out:
            return

        text = event.pattern_match.group(1)
        typed_text = ""

        for char in text:
            typed_text += char
            await event.edit(typed_text + cursor_symbol)
            await asyncio.sleep(typing_speed)

        await event.edit(typed_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    print(f"–ó–∞–ø—É—Å–∫ main()... –í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ {SCRIPT_VERSION}")
    setup_autostart()
    check_for_updates()
    await app.start()
    await client.start(phone=PHONE_NUMBER)
    print("–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    print("–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 'python3 bot.py --remove-autostart'.")
    
    await client.run_until_disconnected()

if __name__ == '__main__':
    check_for_updates()
    asyncio.run(main())
