import os
import configparser
from pyrogram import Client, filters
from pyrogram.errors import SessionPasswordNeeded

config = configparser.ConfigParser()

def load_or_create_config():
    config_path = 'config.ini'
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π
    if not os.path.exists(config_path) or os.path.getsize(config_path) == 0:
        print("\n=== –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===")
        config['pyrogram'] = {
            'api_id': input("–í–≤–µ–¥–∏—Ç–µ API_ID: ").strip(),
            'api_hash': input("–í–≤–µ–¥–∏—Ç–µ API_HASH: ").strip(),
            'phone_number': input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX): ").strip()
        }
        
        with open(config_path, 'w') as f:
            config.write(f)
        print("\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        return config
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
    config.read(config_path)
    
    try:
        required = ['api_id', 'api_hash', 'phone_number']
        if not config.has_section('pyrogram'):
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [pyrogram]")
            
        for key in required:
            if not config.get('pyrogram', key, fallback=None):
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä: {key}")
                
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {e}")
        os.remove(config_path)
        return load_or_create_config()
    
    return config

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config = load_or_create_config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    app = Client(
        "session",
        api_id=config.get('pyrogram', 'api_id'),
        api_hash=config.get('pyrogram', 'api_hash'),
        phone_number=config.get('pyrogram', 'phone_number')
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ 2FA
    try:
        with app:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    except SessionPasswordNeeded:
        print("\n‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        app.password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
        try:
            with app:
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º —É—Å–ø–µ—à–Ω–∞!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            exit(1)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    @app.on_message(filters.command("start"))
    def start(client, message):
        message.reply("üöÄ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

    print("\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run()

if __name__ == "__main__":
    main()
