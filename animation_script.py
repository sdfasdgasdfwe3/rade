import os
import sys
import asyncio
import subprocess
from telethon import TelegramClient, events
from configparser import ConfigParser

CONFIG_FILE = 'config.ini'
SESSION_FILE = 'session_name'
CHOICE_FILE = 'animation_choice.txt'

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã)
AVAILABLE_ANIMATIONS = {
    "1": {"name": "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞", "typing_speed": 0.3, "cursor_symbol": "|"},
    "2": {"name": "–ë—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞", "typing_speed": 0.1, "cursor_symbol": "_"},
}

def create_or_read_config():
    config = ConfigParser()
    config.read(CONFIG_FILE)
    if not config.has_section('Telegram'):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è [Telegram] –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")
        sys.exit(1)
    return config['Telegram']

async def main():
    config = create_or_read_config()
    client = TelegramClient(SESSION_FILE, int(config['api_id']), config['api_hash'])
    await client.start(phone=lambda: config['phone_number'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
    me = await client.get_me()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    animations_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä:\n"
    for num, data in AVAILABLE_ANIMATIONS.items():
        animations_text += f"{num}: {data['name']}\n"
    animations_text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await client.send_message(me, animations_text)
    print("–°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞...")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äì –∂–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
    @client.on(events.NewMessage(incoming=True))
    async def selection_handler(event):
        text = event.raw_text.strip()
        if text in AVAILABLE_ANIMATIONS:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Ñ–∞–π–ª
            with open(CHOICE_FILE, 'w', encoding='utf-8') as f:
                f.write(text)
            await event.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é: {AVAILABLE_ANIMATIONS[text]['name']}\n–ó–∞–ø—É—Å–∫–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç...")
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            await client.disconnect()
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (bot.py)
            subprocess.Popen([sys.executable, "bot.py"])
            sys.exit(0)
        else:
            await event.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")

    await client.run_until_disconnected()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –°–∫—Ä–∏–ø—Ç –≤—ã–±–æ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
