ANIMATION_SCRIPT_VERSION = "0.2.6"

import asyncio
import random

typing_speed = 0.4
pixel_typing_speed = 0.2
cursor_symbol = "‚ñÆ"

async def animate_text(event, text):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –º–∏–≥–∞—é—â–∏–º –∫—É—Ä—Å–æ—Ä–æ–º."""
    displayed_text = ""
    msg = await event.edit(displayed_text + cursor_symbol)
    for char in text:
        displayed_text += char
        try:
            await msg.edit(displayed_text + cursor_symbol)
        except Exception:
            pass
        await asyncio.sleep(typing_speed)
    await msg.edit(displayed_text)

async def pixel_destruction(event, text):
    """–ê–Ω–∏–º–∞—Ü–∏—è '–ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ': —Å–Ω–∞—á–∞–ª–∞ –ø–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è, –∑–∞—Ç–µ–º —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
    lines_count = 4
    chunk_size = max(1, len(text) // lines_count)
    text_lines = [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]
    previous_text = ""
    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞—á–∏–Ω–∞—é –∞–Ω–∏–º–∞—Ü–∏—é..."
    # msg = await event.edit("–ù–∞—á–∏–Ω–∞—é –∞–Ω–∏–º–∞—Ü–∏—é...")
    # await asyncio.sleep(1)  # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    # –§–∞–∑–∞ 1: –ø–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è
    pixelated_text = [list(" " * len(line)) for line in text_lines]
    for _ in range(3):
        for i in range(len(pixelated_text)):
            for j in range(len(pixelated_text[i])):
                if random.random() < 0.1:
                    pixelated_text[i][j] = random.choice([".", "*", "‚óã", "‚äô", "%"])
        displayed_text = "\n".join("".join(line) for line in pixelated_text)
        if displayed_text != previous_text:
            try:
                await msg.edit(displayed_text)
                previous_text = displayed_text
            except Exception:
                pass
        await asyncio.sleep(pixel_typing_speed)
    # –§–∞–∑–∞ 2: —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ
    for _ in range(3):
        displayed_text = "\n".join(
            "".join(random.choice([".", "*", " ", "‚óã", "‚äô"]) for _ in line)
            for line in text_lines
        )
        if displayed_text != previous_text:
            try:
                await msg.edit(displayed_text)
                previous_text = displayed_text
            except Exception:
                pass
        await asyncio.sleep(pixel_typing_speed)
    await msg.edit(text)

async def shifting_pattern(event, text):
    """–ê–Ω–∏–º–∞—Ü–∏—è '–°–¥–≤–∏–≥–∞—é—â–∏–π—Å—è —É–∑–æ—Ä': —Ç–µ–∫—Å—Ç –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ —Å —Ñ–æ–Ω–æ–º."""
    pattern = ["‚ñë", "‚ñí", "‚ñì", "‚ñà"]  # –ò–∑–º–µ–Ω–∏–ª–∏ –ø–æ—Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
    width = len(text) + 6  # –®–∏—Ä–∏–Ω–∞ —Ñ–æ–Ω–∞
    msg = await event.edit("")
    background = "".join(random.choices(pattern, k=width))
    
    for i in range(len(text)):
        # –°–∏–º–≤–æ–ª—ã —Ç–µ–∫—Å—Ç–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
        display_text = background[:3] + text[:i+1] + background[3:]
        try:
            await msg.edit(display_text)
        except Exception:
            pass
        await asyncio.sleep(0.3)
    
    await msg.edit(text)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º

# –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: –∫–ª—é—á ‚Äì –Ω–æ–º–µ—Ä, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –∫–æ—Ä—Ç–µ–∂ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Ñ—É–Ω–∫—Ü–∏—è)
animations = {
    1: ("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è ‚úçÔ∏è", animate_text),
    2: ("–ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ üí•", pixel_destruction),
    3: ("–°–¥–≤–∏–≥–∞—é—â–∏–π—Å—è —É–∑–æ—Ä ‚ñì", shifting_pattern)
}
